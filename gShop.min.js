if ( typeof vitals == undefined ) {
    vitals = {};
}

vitals.shop = (function(){
    

    var main = {
        
        
        settings: {
            name: 'main',
            version: '0.0.1',
            registered: false,
        },
        
        
        plugins: [],
        
        
        register: function (name, func) {
            vitals.shop[name] = func;
            if ( vitals.shop.hasOwnProperty(name) ) {
                this.plugins.push(func);
                vitals.shop[name].settings.registered = true;
            }
        },
        
        
        init: function () {
            for ( var i in this.plugins ) {
                this.plugins[i].init();
            }       
        },
        
        
        userDataHash: {}
        
    };
    
    return main;

})();

var items = {
    

    settings: {
        name: 'items',
        version: '0.0.1',
        registered: false
    },
    
    
    register: function () {
        vitals.shop.register('items', this);
    },
    
    
    init: function () {return;},
    
    
    itemList: (function(){
        var settings = pb.plugin.get('gold_shop_v4').settings,
            uItems = settings.items;
        
        function itemList(key) {
            
            if ( key == undefined || key == null )
                key = 'id';
            
            this.items = {};
            
            for ( var i in uItems ) {
                if (uItems[i].hasOwnProperty(key)){
                    this.items[uItems[i][key]] = uItems[i];
                }
            }
            
            return this.items;
        }
        
        return itemList;        
    })()    
    
}.register();


var userData = {
    
    
    settings: {
        name: 'userData',
        version: '0.0.5',
        registered: false,  
        versionDescription: 'Wrote the update function'
    },
    
    
    register: function () { vitals.shop.register(this.settings.name, this); },
    
    
    init: function () {
        this.createUserDataHash();
    },
    
    
    createUserDataHash: function () {
        var key = proboards.plugin.keys.data['gold_shop_super'];
            userList = Object.keys(proboards.plugin.keys.permissions.gold_shop_super);
            
        for ( var i in userList ) {
            var userData = ( key.hasOwnProperty(i) == true )? key[i]: null;
            vitals.shop.userDataHash[userList[i]] = new this.userHash(userList[i]);
        }       
    },
    
    
    userHash: (function(){
        
        function userHash(user, data) {
            
        var plugin = pb.plugin.get('gold_shop_v4'),
            sKey = proboards.plugin.keys.data['gold_shop_v4'],
            usersOnPage = Object.keys(proboards.plugin.keys.permissions['gold_shop_v4']),          
            self = this;
            
            if ( $.inArray( user.toString(), usersOnPage ) > -1 ) {
                
                this.data = ( (typeof data).toUpperCase() == "OBJECT" )? data : {
                    
                    
                    bi: {},
                    
                    
                    ri: {},
                    
                    
                    io: [],
                    
                    
                    ii: [],
                    
                    
                    ir: []
                    
                };
                
                this.hasBeenChanged = false;
                
                this.update = function () {
                      pb.data.key('gold_shop_user').set({item_id: this.user, value: this });
                };
                
                
                this.user = user;
                
                
                this.get = {
                    
                    
                    bought: function () {
                        return self.data.bi;
                    },
                    
                    
                    received: function () {
                        return self.data.ri;
                    },
                    
                    
                    outbox: function () {
                        return self.data.io;
                    },
                    
                    
                    inbox: function () {
                        return self.data.ii;
                    }
                    
                };
                
                
                this.set = {
                    
                    
                    bought: function ( data ) {
                        if ( (typeof data).toUpperCase() == "OBJECT" ) {
                            self.data.bi = data;
                            self.hasBeenChanged = true;
                        }
                    },
                    
                    
                    received: function ( data ) {
                        if ( (typeof data).toUpperCase() == "OBJECT" ) {
                            self.data.ri = data;
                            self.hasBeenChanged = true;
                        }
                    },
                    
                    
                    outbox: function ( array ) { 
                        if ( (typeof array).toUpperCase() == "ARRAY" ) {
                            self.data.io = array;
                            this.hasBeenChanged = true;
                        }
                    },
                    
                    
                    inbox: function ( array) {
                        if ( (typeof array).toUpperCase() == "ARRAY" ) {
                            self.data.ii = array;
                            this.hasBeenChanged = true;
                        }   
                    },
                    
                    
                    rejected: function ( array ) {
                        if ( (typeof array).toUpperCase() == "ARRAY" ) {
                            self.data.ri = array;
                            this.hasBeenChanged = true;
                        }   
                    }
                    
                };
                
                
                this.add = {
                    
                    
                    bought: function ( id, amount ) {
                        var userItems = self.data.bi,
                            owned,
                            itemLookup = new vitals.shop.items.itemList('id');
                        if ( isNaN( amount ) == false && itemLookup.hasOwnProperty(id) ) {
                            if ( userItems.hasOwnProperty(id) == true ) {                       
                                for( var i = 0, owned = parsInt(userItems[id]); i < amount; i++ ) {
                                    owned++;
                                }
                                self.data.bi = owned;
                            } else {
                                for ( var i = 0, owned = 0; i < amount; i++ ) {
                                    owned++;    
                                }
                                self.data.bi = owned;
                            }
                            this.hasBeenChanged = true;
                            return true;
                        } else {
                            return false;
                        }
                    },
                    
                    
                    received: function ( id, amount ) {
                        var userItems = self.data.bi,
                        received,
                        itemLookup = new vitals.shop.items.itemList('id');
                        if ( isNaN( amount ) == false && itemLookup.hasOwnProperty(id) ) {
                            if ( userItems.hasOwnProperty (id) == true) {
                                for ( var i = 0, received = parseInt(userItems[id]); i < amount; i++ ) {
                                    received++;
                                }
                                self.data.ri = owned;
                            } else {
                                for ( var i = 0, owned = 0; i < amount; i++ ){
                                    owned++;
                                }
                                self.data.ri = owned;
                            }
                            this.hasBeenChanged = true;
                            return true;
                        } else {
                            return false;
                        }
                    }
                    
                };
                
                
                this.receive = function (data) {
                    if ( data.hasOwnProperty('item')
                        && data.hasOwnProperty('amount')
                        && data.hasOwnProperty('giver') 
                        && data.hasOwnProperty('giverID')
                        && data.hasOwnProperty('anonymous')
                    ) {
                        var obj = {};
                        obj.item = item;
                        obj.amount = amount;
                        obj.giver = giver;
                        obj.giverID = giverID;
                        obj.anonymous = anonymous;
                        self.data.ii.push(obj);
                        this.hasBeenChanged = true;
                        return true;
                    }
                    else 
                        return false;
                };
                
                
                this.subtract = {
                    
                    
                    bought: function ( id, amount ) {
                        var shopItems = pb.plugin.get('gold_shop_v4').settings.items,
                            itemHash = vitals.shop.items.itemHash('id'),
                            userBought = self.data.bi,
                            userBoughtAmount;
                            
                        if ( shopItems.hasOwnProperty(id) == true && userBought.hasOwnProperty(id) == true ) {
                            userBoughtAmount = parseInt( userBought[id] );                        
                            if ( amount >= userBoughtAmount ) {
                                for (var i = 0; i < amount; i++ ){
                                    userBoughtAmount--;   
                                }
                            } else {
                                userBoughtAmount = 0;
                                delete self.data.bi[id];
                            }
                            if ( userBoughtAmount > 0 )
                                self.data.bi[id] = userBoughtAmount;
                            this.hasBeenChanged = true;
                            return true;                        
                        } else {
                            return false;                        
                        }
                    },
                    
                    
                    received: function ( id, amount ) {
                        var shopItems = pb.plugin.get('gold_shop_v4').settings.items,
                            itemHash = vitals.shop.items.itemHash('id'),
                            userReceived = self.data.ri,
                            userReceivedAmount;
                            
                        if ( shopItems.hasOwnProperty(id) == true && userReceived.hasOwnProperty(id) == true ) {
                            userReceivedAmount = parseInt( userReceived[id] );                        
                            if ( amount >= userReceivedAmount ) {
                                for (var i = 0; i < amount; i++ ){
                                    userReceivedAmount--;   
                                }
                            } else {
                                userReceivedAmount = 0;
                                delete self.data.ri[id];
                            }
                            if ( userReceivedAmount > 0 )
                                self.data.ri[id] = userReceivedAmount;
                            return true;
                            this.hasBeenChanged = true;                        
                        } else {
                            return false;                        
                        }                    
                    }
                      
                };
                
                return this;
            
            }
            
        };
        
        return userHash;
    
    })()
    
}.register();


var sync = {
	
	
	settings: {
		name: 'sync',
		version: '0.0.2',
		registered: false,
		versionComment: 'Added syncCheck to check if syncs were needed as well as a variable to hold the current state',
		needSync: false
	},


    register: function () { vitals.shop.register(this.settings.name, this); },
    
    
    init: function () {return;},
    
    
    userDataUpdate: function (dry_run) {
    	if ( JSON.stringify( vitals.shop.userDataHash ) == "{}" ) {
	    	var hash = vitals.shop.userDataHash,
	    		changedHashes = [];
	    	for ( var i in hash ) {
	    		if ( hash[i].hasBeenChanged == true ) {
	    			changedHashes.push(hash[i]);
	    		} 
	    	}
	    	if (dry_run != true) {
	    		for( var i in changedHashes ) {
	    			changedHashes[i].update();
	    		}
	    		return true;
	    	} else {
	    		return changedHashes;
	    	}
    	}
    	return false;
    },
    
    
    arraySync: function(data_hashes) {
    	if ( (typeof data_hashes).toUppercase() == "ARRAY") {
    		if ( array[i].hasOwnProperty('update') ) { 
	    		for (var i in data_hashes) {
	    			data_hashes[i].update();
	    		}
	    		return true;
    		}
    	}
    	return false;
    },
    
	
	syncCheck: function () {
		if ( this.userDataUpdate(true).length != 0 && this.userDataUpdate(true) !== false ) {
			return true;
		}
		return false;
	},
	
	
	buttonSync: function () {
		var self = this;
		$('.shop-data-button').each(function() {
			$(this).on('click', function() {
				if ( self.syncCheck() == true ) {
					self.settings.needSync = true;
				}
			});
		});
	}
	
};

var start = setInterval(function() {
    if (!$.isReady) return;
    clearInterval(start);

    vitals.shop.init();

}, 100);


