if ( typeof vitals == undefined ) {
    vitals = {};
}

vitals.shop = (function(){
    

    var main = {
        
        
        settings: {
            name: 'main',
            version: '0.0.1',
            registered: false,
        },
        
        
        plugins: [],
        
        
        register: function (name, func) {
            vitals.shop[name] = func;
            if ( vitals.shop.hasOwnProperty(name) ) {
                this.plugins.push(func);
                vitals.shop[name].settings.registered = true;
            }
        },
        
        
        init: function () {
            for ( var i in this.plugins ) {
                this.plugins[i].init();
            }       
        },
        
        
        userDataHash: {}
        
    };
    
    return main;

})();

var items = {
    

    settings: {
        name: 'items',
        version: '0.0.1',
        registered: false
    },
    
    
    register: function () {
        vitals.shop.register('items', this);
    },
    
    
    init: function () {return;},
    
    
    itemHash: (function(){
        var settings = pb.plugin.get('gold_shop_v4').settings,
            uItems = settings.items;
        
        function itemHash(key) {
            
            if ( key == undefined || key == null )
                key = 'id';
            
            this.items = {};
            
            for ( var i in uItems ) {
                if (uItems[i].hasOwnProperty(key)){
                    this.items[uItems[i][key]] = uItems[i];
                }
            }
            
            return this.items;
        }
        
        return itemHash;        
    })(),
    
    
    categoryHash: (function(){
    	
    	var settings = pb.plugin.get('gold_shop_v4').settings,
    		categories = settings.categories;
    		
    	function categoryHash () {
    		
    		this.categories = {};
    		
    		for ( var i in categories ) {
    			this.categories[categories[i].id] = categories[i].category;
    		}
    		
    		return this.categories;
    		
    	}
    	
    	return categoryHash;
    	
    })()   
    
}.register();


var userData = {
    
    
    settings: {
        name: 'userData',
        version: '0.0.5',
        registered: false,  
        versionDescription: 'Wrote the update function'
    },
    
    
    register: function () { vitals.shop.register(this.settings.name, this); },
    
    
    init: function () {
        this.createUserDataHash();
    },
    
    
    createUserDataHash: function () {
        var key = proboards.plugin.keys.data['gold_shop_super'];
            userList = Object.keys(proboards.plugin.keys.permissions['gold_shop_super']);
            
        for ( var i in userList ) {
        	// Check if key has data already
            var userData = ( key.hasOwnProperty(i) == true )? key[i]: null;
            vitals.shop.userDataHash[userList[i]] = new this.userHash(userList[i]);
        }       
    },
    
    
    userHash: (function(){
        
        function userHash(user, data) {
            
        var plugin = pb.plugin.get('gold_shop_v4'),
            sKey = proboards.plugin.keys.data['gold_shop_super'],
            usersOnPage = Object.keys(proboards.plugin.keys.permissions['gold_shop_super']),          
            self = {};
            
            if ( $.inArray( user.toString(), usersOnPage ) > -1 ) {
                
                self.data = ( (typeof data).toUpperCase() == "ARRAY" && data.length > 0 )? data[0] : {
                    
                    
                    bi: {},
                    
                    
                    ri: {},              
                    
                    
                    gi: [],
                    
                    
                    ti: [],
                    
                    
                    rg: [],
                    
                     
                     rt: [],                  
                    
                    
                    pc: []
                    
                };            
                
                self.hasBeenChanged = false;
                
                
                if ( typeof data != "undefined" ) {
	                if ( data.length > 1 ) {
	                	for (var i in data ) {
	                		if ( i == 0 ) 
	                			continue;
	                		else {
	                			self.data['pc'].push(data[i]);
	                		}	                		
	                	}
	                	self.hasBeenChanged = true;
	                } 
                }               
                
                self.update = function () {
                      pb.data.key('gold_shop_super').set({item_id: self.user, value: [self.data] });
                };
                
                
                self.user = user;
                
                
                self.get = {
                    
                    
                    bought: function () {
                        return self.data.bi;
                    },
                    
                    
                    received: function () {
                        return self.data.ri;
                    },
                    
                    
                    outbox: function () {
                        return self.data.io;
                    },
                    
                    
                    inbox: function () {
                        return self.data.gi;
                    }
                    
                };
                
                
                self.set = {
                    
                    
                    bought: function ( data ) {
                        if ( (typeof data).toUpperCase() == "OBJECT" ) {
                            self.data.bi = data;
                            self.hasBeenChanged = true;
                        }
                    },
                    
                    
                    received: function ( data ) {
                        if ( (typeof data).toUpperCase() == "OBJECT" ) {
                            self.data.ri = data;
                            self.hasBeenChanged = true;
                        }
                    },
                    
                    
                    inbox: function ( array) {
                        if ( (typeof array).toUpperCase() == "ARRAY" ) {
                            self.data.gi = array;
                            self.hasBeenChanged = true;
                        }   
                    },
                    
                    
                    rejectedGifts: function ( array ) {
                        if ( (typeof array).toUpperCase() == "ARRAY" ) {
                            self.data.rg = array;
                            self.hasBeenChanged = true;
                        }   
                    },
                    
                    
                    rejectedTrades: function ( array ) {
                        if ( (typeof array).toUpperCase() == "ARRAY" ) {
                            self.data.rt = array;
                            self.hasBeenChanged = true;
                        }   
                    }                    
                    
                };
                
                
                self.add = {
                    
                    
                    bought: function ( id, amount ) {
                        var userItems = self.data.bi,
                            owned,
                            itemLookup = new vitals.shop.items.itemHash('id');
                        if ( isNaN( amount ) == false && itemLookup.hasOwnProperty(id) ) {
                            if ( userItems.hasOwnProperty(id) == true ) {                       
                                for( var i = 0, owned = parsInt(userItems[id]); i < amount; i++ ) {
                                    owned++;
                                }
                                self.data.bi[id] = owned;
                            } else {
                                for ( var i = 0, owned = 0; i < amount; i++ ) {
                                    owned++;    
                                }
                                self.data.bi[id] = owned;
                            }
                            self.hasBeenChanged = true;
                            return true;
                        } else {
                            return false;
                        }
                    },
                    
                    
                    received: function ( id, amount ) {
                        var userItems = self.data.bi,
                        received,
                        itemLookup = new vitals.shop.items.itemHash('id');
                        if ( isNaN( amount ) == false && itemLookup.hasOwnProperty(id) ) {
                            if ( userItems.hasOwnProperty (id) == true) {
                                for ( var i = 0, owned = parseInt(userItems[id]); i < amount; i++ ) {
                                    owned++;
                                }
                                self.data.ri[id] = owned;
                            } else {
                                for ( var i = 0, owned = 0; i < amount; i++ ){
                                    owned++;
                                }
                                self.data.ri[id] = owned;
                            }
                            self.hasBeenChanged = true;
                            return true;
                        } else {
                            return false;
                        }
                    }
                    
                };            
                
                
                self.pChanges = {
                	
					
					changeTable: function () {
						
						var table = {
								
								
								gm:[],
								
								
								tr: [],
								
								 
								rg: [],
								 
								  
								rt: []
								
						}, data = self.data.pc;
						
						if ( data.length > 0 ) {
						
							for ( var i in data ) {
								switch ( data[i].type ) {
									case "give_message":
										table.gm.push(data[i]);
									case "trade_request":
										table.tr.push(data[i]);
								}
							}
						
						}
						
						return table;
						
					},
					
					
					saveChanges: {
						
						
						gm: function () {
							var changes = self.pChanges.changeTable().gm;
							
							if ( changes.length > 0 ) {
								
								for ( var i in changes ) {
									self.data.gi.push(changes[i]);
								}
								
								self.hasBeenChanges = true;
								return true;
							}
							return false;
						},
						
						
						tm: function () {
							var changes = self.pChanges.changeTable().tm;
							
							if ( changes.length > 0 ) {
								
								for ( var i in changes ) {
									self.data.ti.push(changes[i]);
								}
								
								self.hasBeenChanged = true;
								return true;
							}
							return false;
						},
						
						
						rg: function () {							
							var changes = self.pChanges.changeTable().rg;
							
							if ( changes.length > 0 ) {
								for ( var i in changes ) {
									self.data.rg.push(changes[i]);									
								}
								self.hasBeenChanged = true;
								return true;
							}
							return false;
						},
						
						
						rt: function () {
							var changes = self.pChanges.changeTable().rt;
							
							if( changes.length > 0 ) {
								for ( var i in changes ) {
									self.data.rt.push(changes[i]);
								}
								self.hasBeenChanged = true;
								return true;
							}
						}
						
					}
                	
                },
                
                
                self.subtract = {
                    
                    
                    bought: function ( id, amount ) {
                        var shopItems = pb.plugin.get('gold_shop_v4').settings.items,
                            itemHash = vitals.shop.items.itemHash('id'),
                            userBought = self.data.bi,
                            userBoughtAmount;
                            
                        if ( shopItems.hasOwnProperty(id) == true && userBought.hasOwnProperty(id) == true ) {
                            userBoughtAmount = parseInt( userBought[id] );                        
                            if ( amount >= userBoughtAmount ) {
                                for (var i = 0; i < amount; i++ ){
                                    userBoughtAmount--;   
                                }
                            } else {
                                userBoughtAmount = 0;
                                delete self.data.bi[id];
                            }
                            if ( userBoughtAmount > 0 )
                                self.data.bi[id] = userBoughtAmount;
                            self.hasBeenChanged = true;
                            return true;                        
                        } else {
                            return false;                        
                        }
                    },
                    
                    
                    received: function ( id, amount ) {
                        var shopItems = pb.plugin.get('gold_shop_v4').settings.items,
                            itemHash = vitals.shop.items.itemHash('id'),
                            userReceived = self.data.ri,
                            userReceivedAmount;
                            
                        if ( shopItems.hasOwnProperty(id) == true && userReceived.hasOwnProperty(id) == true ) {
                            userReceivedAmount = parseInt( userReceived[id] );                        
                            if ( amount >= userReceivedAmount ) {
                                for (var i = 0; i < amount; i++ ){
                                    userReceivedAmount--;   
                                }
                            } else {
                                userReceivedAmount = 0;
                                delete self.data.ri[id];
                            }
                            if ( userReceivedAmount > 0 )
                                self.data.ri[id] = userReceivedAmount;
                            return true;
                            self.hasBeenChanged = true;                        
                        } else {
                            return false;                        
                        }                    
                    }
                      
                };
                
                return self;
            
            }
            
        };
        
        //comment
        
        return userHash;
    
    })()
    
}.register();


var sync = {
	
	
	settings: {
		name: 'sync',
		version: '0.0.2',
		registered: false,
		versionComment: 'Added syncCheck to check if syncs were needed as well as a variable to hold the current state',
		needSync: false
	},


    register: function () { vitals.shop.register(this.settings.name, this); },
    
    
    init: function () {return;},
    
    
    userDataUpdate: function (dry_run) {
    	if ( JSON.stringify( vitals.shop.userDataHash ) == "{}" ) {
	    	var hash = vitals.shop.userDataHash,
	    		changedHashes = [];
	    	for ( var i in hash ) {
	    		if ( hash[i].hasBeenChanged == true ) {
	    			changedHashes.push(hash[i]);
	    		} 
	    	}
	    	if (dry_run != true) {
	    		for( var i in changedHashes ) {
	    			changedHashes[i].update();
	    		}
	    		return true;
	    	} else {
	    		return changedHashes;
	    	}
    	}
    	return false;
    },
    
    
    arraySync: function(data_hashes) {
    	if ( (typeof data_hashes).toUppercase() == "ARRAY") {
    		if ( array[i].hasOwnProperty('update') ) { 
	    		for (var i in data_hashes) {
	    			data_hashes[i].update();
	    		}
	    		return true;
    		}
    	}
    	return false;
    },
    
	
	syncCheck: function () {
		if ( this.userDataUpdate(true).length != 0 && this.userDataUpdate(true) !== false ) {
			return true;
		}
		return false;
	},
	
	
	buttonSync: function () {
		var self = this;
		$('.shop-data-button').each(function() {
			$(this).on('click', function() {
				if ( self.syncCheck() == true ) {
					self.settings.needSync = true;
				}
			});
		});
	}
	
};

var shopPage = {
	
	
	settings: {
		
		name: 'shopPage',
		version: '0.0.2',
		registered: false,
		versionDescription: 'Added setup',
		plugin_settings: pb.plugin.get('gold_shop_v4').settings,
		plugin_images: pb.plugin.get('gold_shop_v4').images,
		
		
		shop_name: 'Gold Shop',
		shop_welcome_message: 'Welcome to the shop',
		shop_logo: '',
		shop_categories: {},
		returns_enabled: false,
		giving_enabled: false,
		default_view: 'squares',
		auto_append_shop: true
		
	},
	
	
	register: function () {vitals.shop.register('shopPage', this);return true;},
	
	
	init: function(){
		
		this.setup();
		
		return true;
		
	},
	
	
	setup: function () {
		
		var plugin = pb.plugin.get('gold_shop_v4'),
			settings = plugin.settings;
		
		this.settings.shop_name = (settings.shop_name != undefined && settings.shop_name != '')? settings.shop_name: 'Gold Shop';
		this.settings.shop_welcome_message = (settings.welcome_message != undefined && settings.shop_message != '')? settings.welcome_message: 'Welcome to the shop!';
		// TODO add shop image replacement option
		this.settings.shop_image = this.settings.shop_image;
		this.settings.returns_enabled = (settings.returns == 'true' )? true: false;
		this.settings.giving_enabled = (settings.giving == 'true' )? true: false;
		this.settings.default_view = (settings.default_view == 'true');
		this.settings.auto_append_shop = (settings.auto_append_shop == 'true');
		
		this.createShop();
		
		return true;	
		
	},
	
	
	createShop: function () {
		
		if ( location.href.match(/\/\?shop\&location\=index/) ) {
			
			var wrapper = '',
				welcome = '',
				options = '',
				index = '';
				wrapper += '<div id="the-shop"></div>';
				welcome = this.settings.shop_name;
				
				options += '<table class="shop options-table">';
				options += '<tbody>';
				options += '<tr>';
				options += '<td>';
				options += '<div class="rounded_edges shop" style="width: 225px">';
				options += '<img src="' + this.settings.plugin_images.shop + '" />';
				options += '</div>';
				options += '</td>';
				options += '<td>';
				options += '<table class="shop view-switch">';
				options += '<tbody>';
				options += '<tr>';
				options += '<td class="shop left">Left</td>';
				options += '<td class="shop right">Right</td>';
				options += '</tr>';
				options += '</tbody>';
				options += '</table>';
				options += '</td>';
				options += '<td>';
				options += 'Return an item';
				options += '</td>';
				options += '</tr>';
				options += '</tbody>';
				options += '</table>';
				
				index += '<table class="shop index-table">';
				index += '<thead>';
				index += '<tr>';
				index += '<td>';
				index += '<div class="shop sort-buttons">';
				index += '<span>Sort Buttons:&nbsp;</span>';
				index += '</div>';
				index += '</td>';
				index += '<th class="shop arrange-input">';
				index += '<select><option value="1">Alphabetical</option></select>';
				index += '</th>';
				index += '</tr>';
				index += '</thead>';
				index += '<tbody class="shop shelf-table">';
				index += '<tr>';
				index += '<td colspan="2">';
				index += '<div class="shop shelf"></div>';
				index += '</td>';
				index += '</tr>';
				index += '</tbody>';
				index += '</table>';
				
			yootil.create.page(/\/\?shop\&location\=index/, this.settings.shop_name);				
				
			if ( this.settings.auto_append_shop === true)
				$('#content').append(wrapper);				
			
			yootil.create.container(this.settings.shop_name + ' Options', options).appendTo('#the-shop');
			yootil.create.container(this.settings.shop_name + ' Index', index).appendTo('#the-shop');
			
			this.addDefaultView();
			
		}
		
		
	},
	
	
	createInfoItem: function (id) {
		
		var html = '',
			itemHash = new vitals.shop.items.itemHash('id'),
			itemInfo = itemHash[id],
			categoryHash = new vitals.shop.items.categoryHash(),
			category = categoryHash[itemInfo.category_id];
		
		html += '<div class="shop "' + itemInfo['category_id'] + '"">';
		html += '<table>';
		html += '<tbody>';
		html += '<tr>';
		html += '<td>';
		html += '<div class="shop info-image">';
		html += '<img src="' + itemInfo.image_url + '" />';
		html += '</div>';
		html += '</td>';
		html += '</tr>';
		html += '<tr>';
		html += '<td>';
		html += '</td>';
		html += '<td>';
		html += '<table>';
		html += '<thead class="shop info-information">';
		html += '<tr><th>Name:</th><td>' + itemInfo.name + '</td></tr>';
		html += '<tr><th>Description:</th><td>' + itemInfo.description + '</td></tr>';
		html += '<tr><th>Cost:</th><td>' + itemInfo.cost + '</td></tr>';
		html += '<tr><th>ID:</th><td>' + itemInfo.ID + '</td></tr>';
		html += '<tr><th>Givable:</th><td>' + ( (itemInfo.givable == 'true' && this.settings.giving_enabled == true)? 'Yes':'No' ) + '</td></tr>';
		html += '<tr><th>Returnable:</th><td>' + ( (itemInfo.returnable == 'true' && this.settings.returns_enabled == true)? 'Yes':'No' ) + '</td></tr>';		
		html += '<tr><th>Category:</th><td>' + category + '</td></tr>';									
		html += '</thead>';
		html += '</table>';
		html += '</td>';
		html += '</tr>';
		html += '</tbody>';
		html += '</table>';
		html += '</div>';
		
		return $(html);
		
	} 
	
}.register();


var start = setInterval(function() {
    if (!$.isReady) return;
    clearInterval(start);

    vitals.shop.init();

}, 100);


